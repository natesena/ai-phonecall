generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                Int      @id @default(autoincrement())
  created_time      DateTime @default(now())
  email             String   @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String   @unique
  stripe_customer_id String?  @unique
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String

  @@unique([subscription_id, user_id])
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model user_credits {
  id                Int      @id @default(autoincrement())
  user_id           String   
  stripe_product_id String   // Stripe's product ID
  product_name      String   // Name of the product from Stripe
  amount            Float    // Number of credits remaining

  @@unique([user_id, stripe_product_id])
}

model call {
  id              String    @id @default(uuid())
  callId          String    @unique @map("call_id")    // from webhook message.call.id
  userId          String?   @map("user_id")            // to be linked with clerk user_id
  customerPhone   String    @map("customer_phone")     // from webhook message.customer.number
  assistantId     String    @map("assistant_id")       // from webhook message.assistant.id
  status          String                               // in-progress, ended, etc
  startedAt       DateTime? @map("started_at")
  endedAt         DateTime? @map("ended_at")
  durationSeconds Int?      @map("duration_seconds")
  endedReason     String?   @map("ended_reason")       // customer-ended-call, etc
  cost            Decimal?  @db.Decimal(10, 4)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([userId])
  @@index([customerPhone])
  @@map("calls")
}

model consent_record {
  id              String    @id @default(cuid())
  user_id         String
  timestamp       DateTime  @default(now())
  ip_address      String
  user_agent      String
  terms_version   String
  privacy_version String
  metadata        Json?     // Additional context like browser info, platform, etc.
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@index([user_id])
}
